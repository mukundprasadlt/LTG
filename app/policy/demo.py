"""Helper functions for LLM Models"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/APIs/05_ui_main.ipynb.

# %% auto 0
__all__ = ['OLLAMA_API_URL', 'MODEL_NAME', 'regions', 'industries', 'selected_region', 'selected_industry', 'uploaded_file',
           'col1', 'col2', 'extract_json_from_zip', 'json_to_table']

# %% ../../nbs/APIs/05_ui_main.ipynb 3
from app.policy.generate_controls import standard_processor
from app.policy.generate_policies import policy_standard_processor
import streamlit as st
import zipfile
import os
import json
import pandas as pd
import requests
from datetime import datetime
from typing import List, Dict, Any
from PIL import Image


# %% ../../nbs/APIs/05_ui_main.ipynb 4
# Constants
OLLAMA_API_URL = "http://135.232.123.7:11434/api/generate"
MODEL_NAME = "llama3.3:70b-instruct-q8_0"

logo = Image.open("./app/logo.png")
st.image(logo, width=200)  # Adjust width as needed
 
# --- STREAMLIT UI ---
st.title("Lock Threat Genius")

def extract_json_from_zip(zip_path, extract_to="temp_data"):
    """Extracts JSON files from a ZIP and loads them as a dictionary."""
    json_data = []
    
    # Extract ZIP contents
    with zipfile.ZipFile(zip_path, "r") as zip_ref:
        zip_ref.extractall(extract_to)
    # Read JSON files
    for filename in zip_ref.namelist():
        if filename.endswith(".json") and not filename.startswith('__MACOSX'):
            st.info(filename)
            file_path = os.path.join(extract_to, filename)
            try:
                with open(file_path, "r", encoding="utf-8") as file:
                    json_data.append(json.load(file))
            except UnicodeDecodeError:
                with open(file_path, "r", encoding="ISO-8859-1") as file:
                    json_data.append(json.load(file))
    return json_data

regions = ["North America", "Europe", "Asia", "South America", "Africa", "Australia"]
industries = ["Finance", "Healthcare", "Technology", "Retail", "Manufacturing", "Education"]

# Create dropdowns
selected_region = st.selectbox("Select a Region:", regions)
selected_industry = st.selectbox("Select an Industry:", industries)

# Display selected values
# st.write(f"**Selected Region:** {selected_region}")
# st.write(f"**Selected Industry:** {selected_industry}")

# Step 1: Upload ZIP file containing CSVs
uploaded_file = st.file_uploader("Upload a ZIP file containing CSV files", type="zip")

if uploaded_file:
    json_data = extract_json_from_zip(uploaded_file)
    st.session_state["json_files"] = json_data

# Buttons for Generating Controls and Policies
col1, col2 = st.columns(2)
if col1.button("Generate Controls"):
    st.session_state["mode"] = "controls"

if col2.button("Generate Policies"):
    st.session_state["mode"] = "policies"

def json_to_table(json_data):
    """Convert JSON to tabular format with controls & domains."""
    table_data = []

    for standard in json_data:
        domain = standard.get("domain", "N/A")
        controls = standard.get("Controls", [])

        for control in controls:
            table_data.append({
                "Control ID": control.get("id", "N/A"),
                "Control Name": control.get("name", "N/A"),
                "Domain": domain,
                "Description": control.get("description", "N/A"),
            })

    return pd.DataFrame(table_data)

# --- MAIN LOGIC ---
if "mode" in st.session_state and "json_files" in st.session_state:
    json_data = st.session_state["json_files"]

    if st.session_state["mode"] == "controls":
        st.subheader("Generated Controls")
        generated_controls = standard_processor(json_data)
        df = json_to_table(generated_controls)

        st.subheader("Converted Table")
        st.dataframe(df)
        # Download button
        st.download_button("Download Controls JSON", json.dumps(generated_controls, indent=4), "controls.json", "application/json")

    elif st.session_state["mode"] == "policies":
        st.subheader("Generated Policies")
        generated_policies = policy_standard_processor(json_data,selected_region,selected_industry)
        for policy in generated_policies:
            st.divider()
            st.markdown(policy)

        # Download button
        filename = f"policy_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        st.download_button("Download Policy JSON", json.dumps(generated_policies, indent=4), filename, "application/json")

# --- GO BACK BUTTON ---
if st.button("Go Back"):
    st.session_state.clear()
    st.experimental_rerun()


"""Helper functions for polcies APIs processing"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../../nbs/Helper/tools.ipynb.

# %% auto 0
__all__ = ['apply_markdown', 'apply_markdown_gap', 'merge_sets', 'create_policy_markdown']

# %% ../../../nbs/Helper/tools.ipynb 2
def apply_markdown(
    doamin,  # Single `Domain` object of standard
    index,  # Index of domain in the standard
) -> str:  # Markdown string of the entire domain
    """
    Generate controls Markdown for generate policies and controls, domain should contain(domainId, Control[controlId, name and description])

    - Apply markdown on control `name` & `description`
    - Apply Indexing on `DomainId`
    - Apply Indexing on `controlId`
    """
    doamin["DomainId"] = f'{index}:{doamin["DomainId"]}'
    markdown_output = []
    for control in doamin["Controls"]:
        control["controlId"] = doamin["DomainId"] + ":" + control["controlId"]
        mkd = (
            f"**{control['controlId']} - {control['name']}**: {control['description']}"
        )
        markdown_output.append(mkd)
        control["markdown"] = mkd
    return markdown_output

# %% ../../../nbs/Helper/tools.ipynb 5
def apply_markdown_gap(
    doamin, # Single Domain object of standard 
    index # Index of domain in the standard
) -> str:  # Markdown string of the entire domain
    """
    Generate controls Markdown for gap analysis, domain should contain(domainId, Control[controlId, name and description])

    - Apply markdown on control `name` & `description`
    - Apply Indexing on `DomainId`
    - Apply Indexing on `controlId`
    """
    doamin["domain_number"] = f'{index}:{doamin["domain_number"]}'
    markdown_output = []
    for control in doamin["controls"]:
        control["control_number"] = doamin["domain_number"] + ":" + control["control_number"]
        mkd = f"**{control['control_number']} - {control['control_name']}**: {control['control_description']}"
        markdown_output.append(mkd)
        control["markdown"] = mkd
    return markdown_output

# %% ../../../nbs/Helper/tools.ipynb 8
def merge_sets(
    setA, # First set to merge 
    setB # Second set to merge
) -> list:  # List of merged sets
    "Merge two sets of controls, combining overlapping subsets"
    merged_set = setA.copy()
    result = []
    for subset in setB:
        if merged_set & subset:
            merged_set |= subset
        else:
            result.append(subset)
    result.insert(0, merged_set)
    return result

# %% ../../../nbs/Helper/tools.ipynb 11
def create_policy_markdown(doamin): # Single `Domain` object of standard
    "Create markdown for policy processing"
    markdown_output = f"""
    ### Domain: {doamin['domain']}
    #### Controls:
    """
    for control in doamin['Controls']:
        markdown_output += f"""
    - **Control ID**: {control['id']}
      - **Name**: {control['name']}
      - **Description**: {control['description']}
    """
    return markdown_output
